syntax = "proto3";

package auth;

option go_package = "authmod.sso.v1;ssov1";

service AuthService {
  //oauth2.1
  rpc Authorize (AuthorizeRequest) returns (AuthorizeResponse);
  rpc Token (TokenRequest) returns (TokenResponse);
  //auth
  rpc Register (RegisterRequest) returns (RegisterResponse);
  rpc Login (LoginRequest) returns (LoginResponse);
  rpc IsAdmin (IsAdminRequest) returns (IsAdminResponse);

  // Обновить JWT access token
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);

  // Завершить сессию пользователя
  rpc Logout(LogoutRequest) returns (LogoutResponse);

  // Завершить все сессии пользователя
  rpc LogoutAll(LogoutAllRequest) returns (LogoutAllResponse);

  // Получение информации о текущем пользователе
  /*rpc GetCurrentUser(CurrentUserRequest) returns (CurrentUserResponse);*/
}

service SessionService {
  // Получение списка активных сессий пользователя
  rpc GetUserSessions(UserSessionsRequest) returns (UserSessionsResponse);

/*  // Завершение конкретной сессии пользователя
  rpc TerminateSession(TerminateSessionRequest) returns (TerminateSessionResponse);*/
}

// Service controlling user's role group defining their access
service AccessService {
  // Assigns user a access role
  rpc AssignGroupRole(AssignGroupRoleRequest) returns (AssignGroupRoleResponse);

  rpc RevokeGroupRole(RevokeGroupRoleRequest) returns (RevokeGroupRoleResponse);
}

service VerificationService {
  rpc SaveEmailToken(SaveEmailTokenRequest) returns (SaveEmailTokenResponse);

  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse);
}

//OAUTH2.1
    // important contract for implementing oauth2.1
message AuthorizeRequest {
  string response_type = 1; // code
  string client_id = 2; // client_id serial for every client application
  string scope = 3; // scope permissions for secure api interaction
  string redirect_uri = 4; // redirect on callback client page for receiving auth code
  string state = 5; // additional secure method approving
  string code_challenge = 6; // pkce protection
  string code_challenge_method = 7; // hash method name
}

message AuthorizeResponse {
  oneof response {
    SuccessResponse success = 1;
    AuthenticationRequired auth_required = 2;
    ErrorResponse error = 3;
  }
}

message SuccessResponse {
  string redirect_uri = 1; // client redirect to
  string code = 2; // response_type=code
  string state = 3; // provided state by client
}

message AuthenticationRequired {
  string login_url = 1; // login form url
  string session_id = 2; // temporary session_id
}

message ErrorResponse {
  string error = 1; // "invalid request"
  string error_description = 2; // details of error
}

message TokenRequest {
  string grant_type = 1;
  string auth_code = 2;
  string redirect_uri = 3;
  string code_verifier = 4;
  string client_id = 5;
}

message TokenResponse {
  string id_token = 1;
  string access_token = 2;
  string token_type = 3;
  uint32 expires_in = 4;
  string scope = 5;
  string refresh_token = 6;
}
// Auth

message RegisterRequest {
  string email = 1; //Email of the user to register
  string password = 2; // Password of the user to register
  string callbackUrl = 3; //callback returns on email verification page
}

message RegisterResponse {
  int64 user_id = 1; //User Id of the registered user
}

message LoginRequest {
  string email = 1; // Email of the user to login.
  string password = 2; // Password of the user to login
}

message LoginResponse {
  string redirect_uri = 1; // client redirect to
  //bool success = 1; // indicates whether current login successful
  //string access_token = 1; // Auth token of the logged user
  //string refresh_token = 2; // Refresh token of the logged user
}

message IsAdminRequest {
  int64 user_id = 1; // User id to validate
}

message IsAdminResponse {
  bool is_admin = 1; // Indicates whether the user is an admin
}

message RefreshTokenRequest {
  string refresh_token = 1; // user refresh token stores around a couple of days
  int32 app_id = 2; // app id which user login to
}

message RefreshTokenResponse {
  string access_token = 1; // newly generated access token
  string refresh_token = 2; // newly generated refresh token
  int64 expires_in = 3; // updated time when token expires
}

message LogoutRequest {
  string refresh_token = 1;
}

message LogoutResponse {
  string message = 1; // status response message of request
}

message LogoutAllRequest {
  int64 user_id = 1;
  string token = 2;
}

message LogoutAllResponse {
  string message = 1; // status response message of request
}

// Sessions

message UserSessionsRequest {
  int64 user_id = 1; // take it from current access token
}

message Session {
  int64 session_id = 1;
  string user_id = 2;
  string app_id = 3;
  string ip_address = 4;
  string device = 5; // browser and operation system of user
  int64 created_at = 6;
}

message UserSessionsResponse {
  repeated Session sessions = 1;
}

// Access

message AssignGroupRoleRequest {
  int64 user_id = 1;
  int32 app_id = 2;
  int32 role_id = 3;
  string access_token = 4;
}

message AssignGroupRoleResponse {
  bool result = 1;
  string message = 2;
}

message RevokeGroupRoleRequest {
  int64 user_id = 1;
  int32 app_id = 2;
  int32 role_id = 3;
  string access_token = 4;
}

message RevokeGroupRoleResponse {
  bool result = 1;
  string message = 2;
}

message SaveEmailTokenRequest {
  string email = 1;
  string token = 2;
}

message SaveEmailTokenResponse {
  bool error = 1;
  int32 error_code = 2;
  string error_message = 3;
}

message VerifyEmailRequest {
  string token = 1;
}

message VerifyEmailResponse {
  bool error = 1;
  int32 error_code = 2;
  string error_message = 3;
}